package com.java.algorithm.hot100;

public class 不同的二叉搜索树 {
    public static void main(String[] args) {
        /**
         * 给你一个整数 n ，求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树有多少种？
         * 返回满足题意的二叉搜索树的种数。
         * 输入：n = 3    输出：5
         */

         /**思路：
          * 一般有多少可能性的问题， 
          * 或者有多少路线的问题
          * 可以考虑动规解决
          */

        /**
         * 1.确认dp数组以及下标的含义
         * 
         * dp[i] ： 1到i为节点为根二叉搜索树的个数为dp[i]
         * 
         * 2.确定递推公式
         * 假设n个节点存在二叉排序树的个数是G(n)，令f(i)为以i为根的二叉搜索树的个数
         * 即有:G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n)
         * n为根节点，当i为根节点时，其左子树节点个数为[1,2,3,...,i-1]，右子树节点个数为[i+1,i+2,...n]，
         * 所以当i为根节点时，其左子树节点个数为i-1个，右子树节点为n-i，
         * 即f(i) = G(i-1)*G(n-i),
         * 上面两式可得:G(n) = G(0)*G(n-1)+G(1)*(n-2)+...+G(n-1)*G(0)
         * 
         * 
         * 3.dp数组如何初始化
         * 初始化，只需要初始化dp[0]就可以了，推导的基础都是dp[0]
         * 那么dp[0]应该是多少呢？
         * 从定义上来讲，空节点也是一颗二叉树，也是一颗二叉搜索树，这是可以说得通的
         * 
         * 4.确定遍历顺序
         * 首先一定是遍历节点数，从递归公式：dp[i] += dp[j - 1] * dp[i - j]可以看出，
         * 节点数为i的状态是依靠 i之前节点数的状态。
         * 那么遍历i里面每一个数作为头结点的状态，用j来遍历。
         * for (int i = 1; i <= n; i++) {
         *     for (int j = 1; j <= i; j++) {
         *         dp[i] += dp[j - 1] * dp[i - j];
         *     }
         * }
         * 
         */


    }

    public static int numTrees(int n) {
        //初始化dp数组，这样初始化是为了能遍历到n，
        int[] dp = new int[n+1];
        //初始化0个节点和1个节点的情况，
        dp[0] = 1;
        dp[1] = 1;

        //然后我们从2开始遍历
        






        return 0;
    }



    
}
